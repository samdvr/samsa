name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-targets --all-features

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      etcd:
        image: quay.io/coreos/etcd:v3.5.14
        ports:
          - 2379:2379
          - 2380:2380
        env:
          ETCD_ADVERTISE_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
          ETCD_INITIAL_ADVERTISE_PEER_URLS: http://0.0.0.0:2380
          ETCD_INITIAL_CLUSTER: default=http://0.0.0.0:2380
          ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster
          ETCD_INITIAL_CLUSTER_STATE: new
          ETCD_DATA_DIR: /etcd-data
        options: >-
          --health-cmd="etcdctl endpoint health --endpoints=http://localhost:2379"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for etcd to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:2379/health; do sleep 1; done'

      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib --bins
        env:
          ETCD_ENDPOINTS: http://localhost:2379

      - name: Run integration tests
        run: |
          chmod +x run_consolidated_tests.sh
          ./run_consolidated_tests.sh --no-docker health
        env:
          ETCD_ENDPOINTS: http://localhost:2379
          RUST_LOG: debug

  test-consolidated:
    name: Consolidated Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run consolidated tests
        run: |
          chmod +x run_consolidated_tests.sh
          ./run_consolidated_tests.sh -d all
        env:
          RUST_LOG: info

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-gnu]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: ubuntu-latest  # Cross-compile from Linux
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cross-compilation tools
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          case ${{ matrix.target }} in
            x86_64-pc-windows-gnu)
              sudo apt-get update
              sudo apt-get install -y gcc-mingw-w64-x86-64
              ;;
            x86_64-apple-darwin)
              # Note: This is a  setup for demonstration
              # For production, you might want to use cross or a more robust solution
              echo "Cross-compilation to macOS requires additional setup"
              ;;
          esac

      - name: Build binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} --bins
        env:
          # Set cross-compilation environment for Windows
          CC_x86_64_pc_windows_gnu: x86_64-w64-mingw32-gcc
          CXX_x86_64_pc_windows_gnu: x86_64-w64-mingw32-g++
          AR_x86_64_pc_windows_gnu: x86_64-w64-mingw32-ar

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/server*
            target/${{ matrix.target }}/release/samsa-cli*
          retention-days: 7

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-doc-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-doc-

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all-features

      - name: Deploy to GitHub Pages (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: docs 