name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="${{ github.event.inputs.version }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION (tag: $TAG)"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$'; then
            echo "Error: Version '$VERSION' does not match semantic versioning format"
            exit 1
          fi

      - name: Check if tag exists (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          if git tag -l | grep -q "^$TAG$"; then
            echo "Error: Tag '$TAG' already exists"
            exit 1
          fi

      - name: Validate Cargo.toml version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          if [ "$CARGO_VERSION" != "$VERSION" ]; then
            echo "Error: Version in Cargo.toml ($CARGO_VERSION) does not match release version ($VERSION)"
            echo "Please update Cargo.toml before releasing"
            exit 1
          fi

  build-binaries:
    name: Build Release Binaries
    needs: validate-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: samsa-x86_64-linux
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: samsa-x86_64-linux-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: samsa-aarch64-linux
          - target: x86_64-apple-darwin
            os: macos-latest
            name: samsa-x86_64-macos
          - target: aarch64-apple-darwin
            os: macos-latest
            name: samsa-aarch64-macos
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: samsa-x86_64-windows
            ext: .exe

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-release-

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cross-compilation dependencies (Linux)
        if: runner.os == 'Linux' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          case ${{ matrix.target }} in
            x86_64-unknown-linux-musl)
              sudo apt-get update
              sudo apt-get install -y musl-tools
              ;;
            aarch64-unknown-linux-gnu)
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
          esac

      - name: Build binaries
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.target != 'x86_64-unknown-linux-gnu' && runner.os == 'Linux' }}
          command: build
          args: --release --target ${{ matrix.target }} --bins

      - name: Package binaries (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          
          # Package server
          cp target/${{ matrix.target }}/release/server dist/
          cd dist
          tar czf ${{ matrix.name }}-server-${{ needs.validate-release.outputs.version }}.tar.gz server
          rm server
          
          # Package samsa-cli
          cp ../target/${{ matrix.target }}/release/samsa-cli .
          tar czf ${{ matrix.name }}-samsa-cli-${{ needs.validate-release.outputs.version }}.tar.gz samsa-cli
          rm samsa-cli
          
          # Create combined package
          cp ../target/${{ matrix.target }}/release/server .
          cp ../target/${{ matrix.target }}/release/samsa-cli .
          tar czf ${{ matrix.name }}-${{ needs.validate-release.outputs.version }}.tar.gz server samsa-cli
          
          # Generate checksums
          sha256sum *.tar.gz > checksums.txt

      - name: Package binaries (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path dist -Force
          
          # Package server
          Copy-Item "target\${{ matrix.target }}\release\server.exe" "dist\"
          Set-Location dist
          Compress-Archive -Path "server.exe" -DestinationPath "${{ matrix.name }}-server-${{ needs.validate-release.outputs.version }}.zip"
          Remove-Item "server.exe"
          
          # Package samsa-cli
          Copy-Item "..\target\${{ matrix.target }}\release\samsa-cli.exe" "."
          Compress-Archive -Path "samsa-cli.exe" -DestinationPath "${{ matrix.name }}-samsa-cli-${{ needs.validate-release.outputs.version }}.zip"
          Remove-Item "samsa-cli.exe"
          
          # Create combined package
          Copy-Item "..\target\${{ matrix.target }}\release\server.exe" "."
          Copy-Item "..\target\${{ matrix.target }}\release\samsa-cli.exe" "."
          Compress-Archive -Path "server.exe", "samsa-cli.exe" -DestinationPath "${{ matrix.name }}-${{ needs.validate-release.outputs.version }}.zip"
          
          # Generate checksums
          Get-ChildItem *.zip | ForEach-Object { (Get-FileHash $_.Name -Algorithm SHA256).Hash + "  " + $_.Name } > checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-binaries
          path: dist/*
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Install git-cliff if not available
          if ! command -v git-cliff &> /dev/null; then
            curl -L https://github.com/orhun/git-cliff/releases/latest/download/git-cliff-x86_64-unknown-linux-gnu.tar.gz | tar xz -C /tmp
            sudo mv /tmp/git-cliff /usr/local/bin/
          fi
          
          # Generate changelog for this version
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
          if [ -z "$PREVIOUS_TAG" ]; then
            # First release
            git-cliff --latest --strip header > CHANGELOG_RELEASE.md
          else
            git-cliff --current --strip header > CHANGELOG_RELEASE.md
          fi
          
          # Add installation instructions
          cat >> CHANGELOG_RELEASE.md << 'EOF'
          
          ## Installation
          
          ### Download Pre-built Binaries
          
          Download the appropriate binary for your platform from the assets below:
          
          - **Linux (x86_64)**: `samsa-x86_64-linux-*.tar.gz`
          - **Linux (x86_64, static)**: `samsa-x86_64-linux-musl-*.tar.gz`
          - **Linux (ARM64)**: `samsa-aarch64-linux-*.tar.gz`
          - **macOS (Intel)**: `samsa-x86_64-macos-*.tar.gz`
          - **macOS (Apple Silicon)**: `samsa-aarch64-macos-*.tar.gz`
          - **Windows (x86_64)**: `samsa-x86_64-windows-*.zip`
          
          ### Build from Source
          
          ```bash
          git clone https://github.com/your-org/samsa.git
          cd samsa
          git checkout ${{ needs.validate-release.outputs.tag }}
          cargo build --release
          ```
          
          ### Verify Downloads
          
          All release artifacts include SHA256 checksums for verification:
          
          ```bash
          sha256sum -c checksums.txt
          ```
          EOF

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          release_name: Samsa  ${{ needs.validate-release.outputs.tag }}
          body_path: CHANGELOG_RELEASE.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' || contains(needs.validate-release.outputs.version, '-') }}

      - name: Upload release assets
        run: |
          for artifact_dir in artifacts/*/; do
            for file in "$artifact_dir"*; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                curl \
                  -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")"
              fi
            done
          done

  publish-crates:
    name: Publish to crates.io
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: "!contains(needs.validate-release.outputs.version, '-')"  # Only for stable releases
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install protoc
        uses: arduino/setup-protoc@v2
        with:
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  post-release:
    name: Post-release Tasks
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version for next development cycle
        if: "!contains(needs.validate-release.outputs.version, '-')"
        run: |
          # Parse current version
          CURRENT_VERSION="${{ needs.validate-release.outputs.version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment minor version for next development cycle
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="$MAJOR.$NEXT_MINOR.0-dev"
          
          # Update Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$NEXT_VERSION\"/" Cargo.toml
          
          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml
          git commit -m "chore: bump version to $NEXT_VERSION for development"
          git push

      - name: Create GitHub milestone for next version
        if: "!contains(needs.validate-release.outputs.version, '-')"
        run: |
          CURRENT_VERSION="${{ needs.validate-release.outputs.version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="v$MAJOR.$NEXT_MINOR.0"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/milestones \
            -d "{\"title\":\"$NEXT_VERSION\",\"description\":\"Next minor release\"}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Release workflow failed. Please check the logs and take appropriate action."
          # In a real project, you might want to send notifications to Slack, Discord, etc. 